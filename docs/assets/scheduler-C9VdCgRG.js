function S(Y,C){const l={};for(const t of Y)l[t.city]||(l[t.city]=[]),l[t.city].push(t);const m=Object.keys(l);let n=null;for(const t of m){const i=m.filter(s=>s!==t),e=[[]];for(const s of i){const a=[];for(const p of e)a.push([...p,s]),a.push(p);e.push(...a)}for(const s of e){const a=s,p=i.filter(o=>!a.includes(o)),A=a.reduce((o,r)=>o+l[r].length,0),M=p.reduce((o,r)=>o+l[r].length,0),y=l[t].length;for(let o=0;o<=y;o++){const r=y-o,T=A+o,b=M+r,E=Math.abs(T-b);(!n||E<n.diff)&&(n={splitCity:t,left:[...a,...Array(o).fill(t)],right:[...p,...Array(r).fill(t)],diff:E})}}}if(!n)throw new Error("Could not find a valid split");const f=[],c=[],d=[...l[n.splitCity]],B=n.left.filter(t=>t===n.splitCity).length;n.right.filter(t=>t===n.splitCity).length,f.push(...n.left.filter(t=>t!==n.splitCity).flatMap(t=>l[t])),c.push(...n.right.filter(t=>t!==n.splitCity).flatMap(t=>l[t])),f.push(...d.slice(0,B)),c.unshift(...d.slice(B));let g=f.length+c.length;if(g%2!==0){const t={id:"BYE",name:"BYE",city:"BYE"};f.push(t),g++}const u=[];for(let t=0;t<Math.min(C,f.length);t++){const i=[];for(let e=0;e<f.length;e++)if(!(f[e].id==="BYE"&&c[e].id==="BYE"))if(f[e].id==="BYE"){const s={teamA:c[e],teamB:{id:"BYE",name:"BYE",city:"BYE"},round:t+1};i.push(s)}else if(c[e].id==="BYE"){const s={teamA:f[e],teamB:{id:"BYE",name:"BYE",city:"BYE"},round:t+1};i.push(s)}else{const s={round:t+1,teamA:f[e],teamB:c[e]};i.push(s)}u.push(i),c.unshift(c.pop())}const h=[];for(const t of u)for(const i of t)"teamA"in i&&"teamB"in i&&(i.teamA.id!=="BYE"&&i.teamB.id==="BYE"&&h.push(i.teamA),i.teamB.id!=="BYE"&&i.teamA.id==="BYE"&&h.push(i.teamB));if(h.length>0){const t=[];for(let i=0;i<h.length;i+=2){const e=h[i],s=h[i+1];e&&s&&t.push({teamA:e,teamB:s,round:u.length+1})}t.length>0&&u.push(t)}return u}export{S as generateNRoundsWithByeAndFinal};
